/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ConditionDTO
 */
export interface ConditionDTO {
    /**
     * 
     * @type {string}
     * @memberof ConditionDTO
     */
    'condition'?: string;
    /**
     * 
     * @type {string}
     * @memberof ConditionDTO
     */
    'targetStep'?: string;
}
/**
 * 
 * @export
 * @interface FormSchemaDTO
 */
export interface FormSchemaDTO {
    /**
     * 
     * @type {number}
     * @memberof FormSchemaDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof FormSchemaDTO
     */
    'jsonSchema'?: string;
    /**
     * 
     * @type {string}
     * @memberof FormSchemaDTO
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof FormSchemaDTO
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof FormSchemaDTO
     */
    'lastUpdate'?: string;
}
/**
 * 
 * @export
 * @interface ProcessDefinitionDTO
 */
export interface ProcessDefinitionDTO {
    /**
     * 
     * @type {number}
     * @memberof ProcessDefinitionDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProcessDefinitionDTO
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProcessDefinitionDTO
     */
    'formId'?: number;
    /**
     * 
     * @type {Array<ProcessStepDTO>}
     * @memberof ProcessDefinitionDTO
     */
    'steps'?: Array<ProcessStepDTO>;
}
/**
 * 
 * @export
 * @interface ProcessHistoryDTO
 */
export interface ProcessHistoryDTO {
    /**
     * 
     * @type {string}
     * @memberof ProcessHistoryDTO
     */
    'action'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProcessHistoryDTO
     */
    'actionStatus'?: ProcessHistoryDTOActionStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof ProcessHistoryDTO
     */
    'comments'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProcessHistoryDTO
     */
    'timestamp'?: string;
}

export const ProcessHistoryDTOActionStatusEnum = {
    Started: 'STARTED',
    Pending: 'PENDING',
    Completed: 'COMPLETED',
    Rejected: 'REJECTED',
    Cancelled: 'CANCELLED',
    Approved: 'APPROVED'
} as const;

export type ProcessHistoryDTOActionStatusEnum = typeof ProcessHistoryDTOActionStatusEnum[keyof typeof ProcessHistoryDTOActionStatusEnum];

/**
 * 
 * @export
 * @interface ProcessInstanceDTO
 */
export interface ProcessInstanceDTO {
    /**
     * 
     * @type {number}
     * @memberof ProcessInstanceDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProcessInstanceDTO
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProcessInstanceDTO
     */
    'requesterName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProcessInstanceDTO
     */
    'processName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProcessInstanceDTO
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProcessInstanceDTO
     */
    'decisionDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProcessInstanceDTO
     */
    'formData'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProcessInstanceDTO
     */
    'rejectionComment'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProcessInstanceDTO
     */
    'formId'?: number;
}
/**
 * 
 * @export
 * @interface ProcessStepDTO
 */
export interface ProcessStepDTO {
    /**
     * 
     * @type {number}
     * @memberof ProcessStepDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProcessStepDTO
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProcessStepDTO
     */
    'stepType'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProcessStepDTO
     */
    'validatorRoles'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ProcessStepDTO
     */
    'requiredApproval'?: string;
    /**
     * 
     * @type {Array<ConditionDTO>}
     * @memberof ProcessStepDTO
     */
    'condition'?: Array<ConditionDTO>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProcessStepDTO
     */
    'recipients'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ProcessStepDTO
     */
    'message'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProcessStepDTO
     */
    'formId'?: number;
}
/**
 * 
 * @export
 * @interface ReportDTO
 */
export interface ReportDTO {
    /**
     * 
     * @type {string}
     * @memberof ReportDTO
     */
    'username'?: string;
    /**
     * 
     * @type {number}
     * @memberof ReportDTO
     */
    'processInstanceId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ReportDTO
     */
    'processName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ReportDTO
     */
    'startTime'?: string;
    /**
     * 
     * @type {Array<ProcessHistoryDTO>}
     * @memberof ReportDTO
     */
    'processHistoryDTOList'?: Array<ProcessHistoryDTO>;
    /**
     * 
     * @type {string}
     * @memberof ReportDTO
     */
    'currentStatus'?: ReportDTOCurrentStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof ReportDTO
     */
    'processDefinitionName'?: string;
}

export const ReportDTOCurrentStatusEnum = {
    Started: 'STARTED',
    Pending: 'PENDING',
    Completed: 'COMPLETED',
    Rejected: 'REJECTED',
    Cancelled: 'CANCELLED',
    Approved: 'APPROVED'
} as const;

export type ReportDTOCurrentStatusEnum = typeof ReportDTOCurrentStatusEnum[keyof typeof ReportDTOCurrentStatusEnum];

/**
 * 
 * @export
 * @interface SubmissionDTO
 */
export interface SubmissionDTO {
    /**
     * 
     * @type {number}
     * @memberof SubmissionDTO
     */
    'processDefenitionId'?: number;
    /**
     * 
     * @type {string}
     * @memberof SubmissionDTO
     */
    'formData'?: string;
}

/**
 * FormControllerApi - axios parameter creator
 * @export
 */
export const FormControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllFormSchema: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/form/form-schema`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFormSchema: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getFormSchema', 'id', id)
            const localVarPath = `/form/form-schema/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FormSchemaDTO} formSchemaDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveFormSchema: async (formSchemaDTO: FormSchemaDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'formSchemaDTO' is not null or undefined
            assertParamExists('saveFormSchema', 'formSchemaDTO', formSchemaDTO)
            const localVarPath = `/form/form-schema`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(formSchemaDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SubmissionDTO} submissionDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submit: async (submissionDTO: SubmissionDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'submissionDTO' is not null or undefined
            assertParamExists('submit', 'submissionDTO', submissionDTO)
            const localVarPath = `/form`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(submissionDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FormSchemaDTO} formSchemaDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFormSchema: async (formSchemaDTO: FormSchemaDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'formSchemaDTO' is not null or undefined
            assertParamExists('updateFormSchema', 'formSchemaDTO', formSchemaDTO)
            const localVarPath = `/form/form-schema`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(formSchemaDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FormControllerApi - functional programming interface
 * @export
 */
export const FormControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FormControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllFormSchema(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FormSchemaDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllFormSchema(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormControllerApi.getAllFormSchema']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFormSchema(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FormSchemaDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFormSchema(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormControllerApi.getFormSchema']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {FormSchemaDTO} formSchemaDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveFormSchema(formSchemaDTO: FormSchemaDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveFormSchema(formSchemaDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormControllerApi.saveFormSchema']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {SubmissionDTO} submissionDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submit(submissionDTO: SubmissionDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.submit(submissionDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormControllerApi.submit']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {FormSchemaDTO} formSchemaDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateFormSchema(formSchemaDTO: FormSchemaDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateFormSchema(formSchemaDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormControllerApi.updateFormSchema']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FormControllerApi - factory interface
 * @export
 */
export const FormControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FormControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllFormSchema(options?: RawAxiosRequestConfig): AxiosPromise<Array<FormSchemaDTO>> {
            return localVarFp.getAllFormSchema(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFormSchema(id: number, options?: RawAxiosRequestConfig): AxiosPromise<FormSchemaDTO> {
            return localVarFp.getFormSchema(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FormSchemaDTO} formSchemaDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveFormSchema(formSchemaDTO: FormSchemaDTO, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.saveFormSchema(formSchemaDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SubmissionDTO} submissionDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submit(submissionDTO: SubmissionDTO, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.submit(submissionDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FormSchemaDTO} formSchemaDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFormSchema(formSchemaDTO: FormSchemaDTO, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.updateFormSchema(formSchemaDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FormControllerApi - object-oriented interface
 * @export
 * @class FormControllerApi
 * @extends {BaseAPI}
 */
export class FormControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormControllerApi
     */
    public getAllFormSchema(options?: RawAxiosRequestConfig) {
        return FormControllerApiFp(this.configuration).getAllFormSchema(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormControllerApi
     */
    public getFormSchema(id: number, options?: RawAxiosRequestConfig) {
        return FormControllerApiFp(this.configuration).getFormSchema(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FormSchemaDTO} formSchemaDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormControllerApi
     */
    public saveFormSchema(formSchemaDTO: FormSchemaDTO, options?: RawAxiosRequestConfig) {
        return FormControllerApiFp(this.configuration).saveFormSchema(formSchemaDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SubmissionDTO} submissionDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormControllerApi
     */
    public submit(submissionDTO: SubmissionDTO, options?: RawAxiosRequestConfig) {
        return FormControllerApiFp(this.configuration).submit(submissionDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FormSchemaDTO} formSchemaDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormControllerApi
     */
    public updateFormSchema(formSchemaDTO: FormSchemaDTO, options?: RawAxiosRequestConfig) {
        return FormControllerApiFp(this.configuration).updateFormSchema(formSchemaDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProcessControllerApi - axios parameter creator
 * @export
 */
export const ProcessControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelRequest: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cancelRequest', 'id', id)
            const localVarPath = `/processes/cancel-request/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clear: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/processes/clear`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCurrentUserReport: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/processes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProcessDefinition: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/processes/process-definition`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllReports: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/processes/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<ProcessDefinitionDTO>} processDefinitionDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveAllProcessDefinition: async (processDefinitionDTO: Array<ProcessDefinitionDTO>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'processDefinitionDTO' is not null or undefined
            assertParamExists('saveAllProcessDefinition', 'processDefinitionDTO', processDefinitionDTO)
            const localVarPath = `/processes/process-definition/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(processDefinitionDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProcessDefinitionDTO} processDefinitionDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveProcessDefinition: async (processDefinitionDTO: ProcessDefinitionDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'processDefinitionDTO' is not null or undefined
            assertParamExists('saveProcessDefinition', 'processDefinitionDTO', processDefinitionDTO)
            const localVarPath = `/processes/process-definition`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(processDefinitionDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<ProcessDefinitionDTO>} processDefinitionDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAllProcessDefinition: async (processDefinitionDTO: Array<ProcessDefinitionDTO>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'processDefinitionDTO' is not null or undefined
            assertParamExists('updateAllProcessDefinition', 'processDefinitionDTO', processDefinitionDTO)
            const localVarPath = `/processes/process-definition/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(processDefinitionDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProcessDefinitionDTO} processDefinitionDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProcessDefinition: async (processDefinitionDTO: ProcessDefinitionDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'processDefinitionDTO' is not null or undefined
            assertParamExists('updateProcessDefinition', 'processDefinitionDTO', processDefinitionDTO)
            const localVarPath = `/processes/process-definition`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(processDefinitionDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProcessControllerApi - functional programming interface
 * @export
 */
export const ProcessControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProcessControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelRequest(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelRequest(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProcessControllerApi.cancelRequest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clear(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clear(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProcessControllerApi.clear']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCurrentUserReport(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ReportDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCurrentUserReport(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProcessControllerApi.getAllCurrentUserReport']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllProcessDefinition(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProcessDefinitionDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllProcessDefinition(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProcessControllerApi.getAllProcessDefinition']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllReports(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ReportDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllReports(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProcessControllerApi.getAllReports']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Array<ProcessDefinitionDTO>} processDefinitionDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveAllProcessDefinition(processDefinitionDTO: Array<ProcessDefinitionDTO>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveAllProcessDefinition(processDefinitionDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProcessControllerApi.saveAllProcessDefinition']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ProcessDefinitionDTO} processDefinitionDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveProcessDefinition(processDefinitionDTO: ProcessDefinitionDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveProcessDefinition(processDefinitionDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProcessControllerApi.saveProcessDefinition']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Array<ProcessDefinitionDTO>} processDefinitionDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAllProcessDefinition(processDefinitionDTO: Array<ProcessDefinitionDTO>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAllProcessDefinition(processDefinitionDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProcessControllerApi.updateAllProcessDefinition']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ProcessDefinitionDTO} processDefinitionDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProcessDefinition(processDefinitionDTO: ProcessDefinitionDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProcessDefinition(processDefinitionDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProcessControllerApi.updateProcessDefinition']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProcessControllerApi - factory interface
 * @export
 */
export const ProcessControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProcessControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelRequest(id: number, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.cancelRequest(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clear(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.clear(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCurrentUserReport(options?: RawAxiosRequestConfig): AxiosPromise<Array<ReportDTO>> {
            return localVarFp.getAllCurrentUserReport(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProcessDefinition(options?: RawAxiosRequestConfig): AxiosPromise<Array<ProcessDefinitionDTO>> {
            return localVarFp.getAllProcessDefinition(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllReports(options?: RawAxiosRequestConfig): AxiosPromise<Array<ReportDTO>> {
            return localVarFp.getAllReports(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array<ProcessDefinitionDTO>} processDefinitionDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveAllProcessDefinition(processDefinitionDTO: Array<ProcessDefinitionDTO>, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.saveAllProcessDefinition(processDefinitionDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProcessDefinitionDTO} processDefinitionDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveProcessDefinition(processDefinitionDTO: ProcessDefinitionDTO, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.saveProcessDefinition(processDefinitionDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array<ProcessDefinitionDTO>} processDefinitionDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAllProcessDefinition(processDefinitionDTO: Array<ProcessDefinitionDTO>, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.updateAllProcessDefinition(processDefinitionDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProcessDefinitionDTO} processDefinitionDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProcessDefinition(processDefinitionDTO: ProcessDefinitionDTO, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.updateProcessDefinition(processDefinitionDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProcessControllerApi - object-oriented interface
 * @export
 * @class ProcessControllerApi
 * @extends {BaseAPI}
 */
export class ProcessControllerApi extends BaseAPI {
    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessControllerApi
     */
    public cancelRequest(id: number, options?: RawAxiosRequestConfig) {
        return ProcessControllerApiFp(this.configuration).cancelRequest(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessControllerApi
     */
    public clear(options?: RawAxiosRequestConfig) {
        return ProcessControllerApiFp(this.configuration).clear(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessControllerApi
     */
    public getAllCurrentUserReport(options?: RawAxiosRequestConfig) {
        return ProcessControllerApiFp(this.configuration).getAllCurrentUserReport(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessControllerApi
     */
    public getAllProcessDefinition(options?: RawAxiosRequestConfig) {
        return ProcessControllerApiFp(this.configuration).getAllProcessDefinition(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessControllerApi
     */
    public getAllReports(options?: RawAxiosRequestConfig) {
        return ProcessControllerApiFp(this.configuration).getAllReports(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Array<ProcessDefinitionDTO>} processDefinitionDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessControllerApi
     */
    public saveAllProcessDefinition(processDefinitionDTO: Array<ProcessDefinitionDTO>, options?: RawAxiosRequestConfig) {
        return ProcessControllerApiFp(this.configuration).saveAllProcessDefinition(processDefinitionDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProcessDefinitionDTO} processDefinitionDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessControllerApi
     */
    public saveProcessDefinition(processDefinitionDTO: ProcessDefinitionDTO, options?: RawAxiosRequestConfig) {
        return ProcessControllerApiFp(this.configuration).saveProcessDefinition(processDefinitionDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Array<ProcessDefinitionDTO>} processDefinitionDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessControllerApi
     */
    public updateAllProcessDefinition(processDefinitionDTO: Array<ProcessDefinitionDTO>, options?: RawAxiosRequestConfig) {
        return ProcessControllerApiFp(this.configuration).updateAllProcessDefinition(processDefinitionDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProcessDefinitionDTO} processDefinitionDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessControllerApi
     */
    public updateProcessDefinition(processDefinitionDTO: ProcessDefinitionDTO, options?: RawAxiosRequestConfig) {
        return ProcessControllerApiFp(this.configuration).updateProcessDefinition(processDefinitionDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ValidatorControllerApi - axios parameter creator
 * @export
 */
export const ValidatorControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('approve', 'id', id)
            const localVarPath = `/requests/{id}/approve`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRequestsByStatus: async (status: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'status' is not null or undefined
            assertParamExists('getRequestsByStatus', 'status', status)
            const localVarPath = `/requests/{status}`
                .replace(`{${"status"}}`, encodeURIComponent(String(status)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {{ [key: string]: string; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reject: async (id: number, requestBody: { [key: string]: string; }, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('reject', 'id', id)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('reject', 'requestBody', requestBody)
            const localVarPath = `/requests/{id}/reject`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ValidatorControllerApi - functional programming interface
 * @export
 */
export const ValidatorControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ValidatorControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async approve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.approve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ValidatorControllerApi.approve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRequestsByStatus(status: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProcessInstanceDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRequestsByStatus(status, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ValidatorControllerApi.getRequestsByStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {{ [key: string]: string; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reject(id: number, requestBody: { [key: string]: string; }, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reject(id, requestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ValidatorControllerApi.reject']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ValidatorControllerApi - factory interface
 * @export
 */
export const ValidatorControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ValidatorControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approve(id: number, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.approve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRequestsByStatus(status: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<ProcessInstanceDTO>> {
            return localVarFp.getRequestsByStatus(status, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {{ [key: string]: string; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reject(id: number, requestBody: { [key: string]: string; }, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.reject(id, requestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ValidatorControllerApi - object-oriented interface
 * @export
 * @class ValidatorControllerApi
 * @extends {BaseAPI}
 */
export class ValidatorControllerApi extends BaseAPI {
    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ValidatorControllerApi
     */
    public approve(id: number, options?: RawAxiosRequestConfig) {
        return ValidatorControllerApiFp(this.configuration).approve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} status 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ValidatorControllerApi
     */
    public getRequestsByStatus(status: string, options?: RawAxiosRequestConfig) {
        return ValidatorControllerApiFp(this.configuration).getRequestsByStatus(status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {{ [key: string]: string; }} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ValidatorControllerApi
     */
    public reject(id: number, requestBody: { [key: string]: string; }, options?: RawAxiosRequestConfig) {
        return ValidatorControllerApiFp(this.configuration).reject(id, requestBody, options).then((request) => request(this.axios, this.basePath));
    }
}



